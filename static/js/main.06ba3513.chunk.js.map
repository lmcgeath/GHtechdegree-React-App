{"version":3,"sources":["Components/Search.js","Components/pageNotFound.js","Components/Nav.js","Components/Photo.js","Components/NotFound.js","Components/PhotoList.js","config.js","App.js","serviceWorker.js","index.js"],"names":["Search","state","searchText","onSearchChange","event","setState","target","value","handleSubmit","preventDefault","props","onSearch","query","currentTarget","reset","className","onSubmit","this","type","onChange","name","ref","input","placeholder","required","fill","height","viewBox","width","xmlns","d","Component","pageNotFound","Nav","exact","to","onClick","Photo","src","url","alt","NotFound","PhotoList","imgs","results","data","length","map","img","farm","server","id","secret","key","apiKey","App","performSearch","axios","get","then","res","photos","photo","loading","catch","error","console","log","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yTAEqBA,E,2MAEnBC,MAAQ,CACNC,WAAY,I,EAGdC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CAAEH,WAAYE,EAAME,OAAOC,S,EAG3CC,aAAe,SAAAJ,GACbA,EAAMK,iBACN,EAAKC,MAAMC,SAAS,EAAKC,MAAML,OAC/BH,EAAMS,cAAcC,S,wEAGZ,IAAD,OACP,OACE,0BAAMC,UAAU,cAAcC,SAAUC,KAAKT,cAC1C,2BAAOU,KAAK,SAASC,SAAUF,KAAKd,eAAgBiB,KAAK,SAASC,IAAK,SAACC,GAAD,OAAW,EAAKV,MAAQU,GAAOC,YAAY,SAASC,UAAQ,IACnI,4BAAQN,KAAK,SAASH,UAAU,iBAC7B,yBAAKU,KAAK,OAAOC,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAC/D,0BAAMC,EAAE,+OACR,0BAAMA,EAAE,gBAAgBL,KAAK,gB,GAvBRM,aCUrBC,EAVM,kBAClB,yBAAKjB,UAAU,aACZ,4BACG,4BACG,mEAA4C,wFCHnCkB,E,iLACX,IAAD,OACN,OACA,yBAAKlB,UAAU,YACZ,4BAEG,4BAAI,kBAAC,IAAD,CAASmB,OAAK,EAACC,GAAG,aAAaC,QAAS,kBAAM,EAAK1B,MAAM0B,QAAQ,eAAjE,cACJ,4BAAI,kBAAC,IAAD,CAASD,GAAG,QAAQC,QAAS,kBAAM,EAAK1B,MAAM0B,QAAQ,UAAtD,SACJ,4BAAI,kBAAC,IAAD,CAASD,GAAG,WAAWC,QAAS,kBAAM,EAAK1B,MAAM0B,QAAQ,aAAzD,kB,GARoBL,aCMlBM,EAPD,SAAA3B,GAAK,OAChB,wBAAIK,UAAU,mBACX,yBAAKuB,IAAK5B,EAAM6B,IAAKC,IAAI,OCShBC,EAXE,SAAA/B,GAAK,OACtB,6BACG,4BACG,wBAAIK,UAAU,aACX,gDACA,4FCiBM2B,EApBG,SAAAhC,GAEf,IACIiC,EADEC,EAAUlC,EAAMmC,KAWvB,OAPCF,EAFIC,EAAQE,OAAS,EAEdF,EAAQG,KAAI,SAAAC,GAAG,OAChB,kBAAC,EAAD,CAAOT,IAAG,sBAAiBS,EAAIC,KAArB,6BAA8CD,EAAIE,OAAlD,YAA4DF,EAAIG,GAAhE,YAAsEH,EAAII,OAA1E,QAAwFC,IAAKL,EAAIG,QAGvG,kBAAC,EAAD,MAIT,wBAAIpC,UAAU,cACX4B,ICjBQW,G,MAFA,oCCcMC,E,YAElB,aAAe,IAAD,8BACZ,+CAWFC,cAAgB,WAA0B,IAAzB5C,EAAwB,uDAAhB,YACvB6C,IAAMC,IAAN,oFAAuFJ,EAAvF,iBAAsG1C,EAAtG,6DAGG+C,MAAK,SAAAC,GACJ,EAAKvD,SAAS,CACZsC,KAAMiB,EAAIf,KAAKgB,OAAOC,MACtBC,SAAS,OAGZC,OAAM,SAAAC,GACLC,QAAQC,IAAI,kCAAmCF,OArBnD,EAAKhE,MAAQ,CACX0C,KAAM,GACNoB,SAAS,GAJC,E,iFASZ9C,KAAKuC,kB,+BAmBL,OACF,kBAAC,IAAD,KACI,6BACE,yBAAKzC,UAAU,aACZ,kBAAC,EAAD,CAAQJ,SAAUM,KAAKuC,gBAEvB,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAOtB,OAAK,EAACkC,KAAK,MAClB,kBAAC,IAAD,CAAOA,KAAK,6BACZ,kBAAC,IAAD,CAAOA,KAAK,UACZ,kBAAC,IAAD,CAAOA,KAAK,eACZ,kBAAC,IAAD,CAAOA,KAAK,aACZ,kBAAC,IAAD,CAAOC,UAAWrC,KAErB,kBAAC,EAAD,CAAKI,QAASnB,KAAKuC,kBAItB,yBAAKzC,UAAU,mBAGVE,KAAKhB,MAAM8D,QACT,yCACA,kBAAC,EAAD,CAAWlB,KAAM5B,KAAKhB,MAAM0C,a,GArDXZ,aCFbuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.06ba3513.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Search extends Component {\r\n  \r\n  state = {\r\n    searchText: ''\r\n  }\r\n  //Sets the searchText state to the text the user types into the search box\r\n  onSearchChange = event => {\r\n    this.setState({ searchText: event.target.value });\r\n  }\r\n  //Sends the user input to the url as the query prop to fetch new data\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.onSearch(this.query.value);\r\n    event.currentTarget.reset();\r\n  }\r\n  \r\n  render() {  \r\n    return (\r\n      <form className=\"search-form\" onSubmit={this.handleSubmit}>\r\n         <input type=\"search\" onChange={this.onSearchChange} name=\"search\" ref={(input) => this.query = input} placeholder=\"Search\" required/>\r\n         <button type=\"submit\" className=\"search-button\">\r\n            <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n               <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\r\n               <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n            </svg>\r\n         </button>\r\n      </form>\r\n   \r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\nconst pageNotFound = () => (\r\n   <div className=\"not-found\">\r\n      <ul>\r\n         <li>\r\n            <h3>Sorry, that page could not be found</h3><p>Please use the search box or click the preset buttons</p>\r\n         </li>\r\n      </ul>\r\n   </div>\r\n)\r\n\r\nexport default pageNotFound;","import React, { Component } from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport default class Nav extends Component {\r\nrender() {\r\n   return(\r\n   <nav className=\"main-nav\">\r\n      <ul>\r\n         {/* Sets Navlinks to their prospective routes to allow data to be fetched when clicked based on the category */}\r\n         <li><NavLink exact to='/mountains' onClick={() => this.props.onClick('mountains')}>Mountains</NavLink></li>\r\n         <li><NavLink to='/dogs' onClick={() => this.props.onClick('dogs')} >Dogs</NavLink></li>\r\n         <li><NavLink to='/sunsets' onClick={() => this.props.onClick('sunsets')}>Sunsets</NavLink></li>\r\n      </ul>\r\n   </nav>\r\n  \r\n   );\r\n   }\r\n}","import React from 'react';\r\n\r\nconst Photo = props => (\r\n   <li className=\"photo-container\">\r\n      <img src={props.url} alt=\"\"/>\r\n   </li>\r\n\r\n );\r\n\r\nexport default Photo;","import React from 'react';\r\n\r\nconst NotFound = props => (\r\n<div>\r\n   <ul>\r\n      <li className=\"not-found\">\r\n         <h3>No Results Found</h3>\r\n         <p>Your search did not return any results. Please try again.</p>\r\n      </li>\r\n   </ul>\r\n</div>\r\n );\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport Photo from './Photo';\r\nimport NotFound from './NotFound';\r\n\r\nconst PhotoList = props => { \r\n\r\n   const results = props.data;\r\n   let imgs;\r\n   if (results.length > 0) {\r\n      // Maps through the images and assigns urls to them. If none are returned, the NotFound component is called\r\n   imgs = results.map(img => \r\n         <Photo url={`https://farm${img.farm}.staticflickr.com/${img.server}/${img.id}_${img.secret}.jpg`} key={img.id}/>\r\n      );\r\n   } else {\r\n      imgs = <NotFound />\r\n   }\r\n  \r\n  return(\r\n    <ul className=\"photo-list\">\r\n      {imgs}\r\n    </ul> \r\n  );\r\n}\r\n\r\nexport default PhotoList;\r\n","const apiKey = 'bceff109e16f3d85844791d1e3bf63b8';\r\n\r\nexport default apiKey;\r\n\r\n","import React, {Component} from 'react';\r\nimport {\r\n   BrowserRouter,\r\n   Route,\r\n   Switch\r\n} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Search from './Components/Search';\r\nimport pageNotFound from './Components/pageNotFound';\r\nimport Nav from './Components/Nav';\r\nimport PhotoList from './Components/PhotoList';\r\nimport './css/index.css';\r\nimport apiKey from './config.js';\r\n\r\nexport default class App extends Component {\r\n\r\n   constructor() {\r\n     super();\r\n     this.state = {\r\n       imgs: [],\r\n       loading: true\r\n     };\r\n   } \r\n \r\n   componentDidMount() {\r\n     this.performSearch();\r\n   }\r\n   //Fetches Flickr images with mountains as the default\r\n   performSearch = (query = 'mountains') => {\r\n     axios.get(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&sort=relevance&format=json&nojsoncallback=1`\r\n     )\r\n     //Sets imgs state to the list of photos returned from the api call and sets loading state to false\r\n       .then(res => {\r\n         this.setState({\r\n           imgs: res.data.photos.photo,\r\n           loading: false\r\n         });\r\n       })\r\n       .catch(error => {\r\n         console.log('Error fetching and parsing data', error);\r\n       });    \r\n   }\r\n  \r\n   render() { \r\n     return (\r\n   <BrowserRouter>\r\n       <div>\r\n         <div className=\"container\">\r\n            <Search onSearch={this.performSearch} />\r\n            {/* Uses Switch to render the pageNotFound component if the url cannot be matched */}\r\n            <Switch>\r\n               <Route exact path=\"/\"/>\r\n               <Route path=\"/GHtechdegree-React-App/\"/>\r\n               <Route path=\"/dogs\" />\r\n               <Route path=\"/mountains\" />\r\n               <Route path=\"/sunsets\" />\r\n               <Route component={pageNotFound} />\r\n            </Switch> \r\n            <Nav onClick={this.performSearch} />\r\n           \r\n         </div>  \r\n      </div>  \r\n         <div className=\"photo-container\">  \r\n         {/* Creates the loading indicator if no images are displayed to the page  */}\r\n           {\r\n             (this.state.loading)\r\n              ? <p>Loading...</p>\r\n              : <PhotoList data={this.state.imgs} />\r\n           }                 \r\n         </div>\r\n   </BrowserRouter>\r\n     );\r\n   }\r\n }\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}